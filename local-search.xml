<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git和GitHub建立远程连接的入门教程</title>
    <link href="/2020/03/31/%E5%85%A5%E9%97%A8_%E6%9C%AC%E5%9C%B0Git%E4%B8%8EGitHub%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/"/>
    <url>/2020/03/31/%E5%85%A5%E9%97%A8_%E6%9C%AC%E5%9C%B0Git%E4%B8%8EGitHub%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub和Git的初步使用"><a href="#GitHub和Git的初步使用" class="headerlink" title="GitHub和Git的初步使用"></a>GitHub和Git的初步使用</h1><font size="3"><h1 id="一、注册GitHub"><a href="#一、注册GitHub" class="headerlink" title="一、注册GitHub"></a>一、注册GitHub</h1><ul><li>1进入GitHub，网址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li><li>2点击右上角Sign up进入注册界面</li><li>3依次输入用户名，邮箱，密码，验证码</li><li>4登录自己的邮箱验证邮箱，然后登录GitHub</li><li>5建议使用chrome浏览器，在网址连接右边点击翻译此页后自动翻译页面为中文<br></font><br /> </li></ul><hr><a id="more"></a><font size="3"><h1 id="二、配置git获取秘钥"><a href="#二、配置git获取秘钥" class="headerlink" title="二、配置git获取秘钥"></a>二、配置git获取秘钥</h1><ul><li>1 下载安装git，网址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li>2 配置git的邮箱和密码，两串代码如下：</li><li>$ git config –global user.name “输入你的用户名”</li><li>$ git config –global user.email “输入你的邮箱”</li><li>3 打开git，输入 $ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>“<br>后面的<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>是你在github上注册使用的邮箱。</li><li>4 输入后Git要求确认路径和密码，直接回车默认设置，它会显示秘钥图像代表keys已经生成了，我们需要这串秘钥来和GitHub上的远程仓库和本地仓库进行远程连接。</li><li>5 秘钥路径在C：\用户\你的用户名（默认是Administrator文件夹）.ssh 这个文件夹，找到打开后会看到一个id_rsa.pub文件，右键记事本或其他编辑器打开，复制全部keys。<br></font><br /> </li></ul><hr><font size="3"><h1 id="三、GitHub添加SSH秘钥"><a href="#三、GitHub添加SSH秘钥" class="headerlink" title="三、GitHub添加SSH秘钥"></a>三、GitHub添加SSH秘钥</h1><ul><li>1登录自己的GitHub账号。</li><li>2点击右上角自己的头像，打开”setting”。</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/sttings.png" alt="图片的alt信息，可空)"></li><li></li><li>3左侧栏找到”SSH and GPS keys” 点击进入。</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/SSH.png" alt="图片的alt信息，可空)"></li><li>4右上角点击”New SSH key”,<br><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/newSSHkey.png" alt="图片的alt信息，可空)"></li></ul><p>会进入一个输入界面，Title随便取一个名字，最好是你当前使用的计算机名以便区分，然后将刚刚复制的keys粘贴到key框框中，点击Add SSH key。</p><ul><li>5验证一下连接是否成功回到本机，打开Git Bash,输入命令<br>$ ssh -T <a href="mailto:git@github.com">git@github.com</a>，第一次输入会显示continue？，输入yes继续，看到显示You’ve successfully authenticated, but GitHub does not provide shell access代表连接已经成功。<br></font><br /> </li></ul><hr><font size="3"><h1 id="四、Git编辑本地仓库和上传至GitHub远程仓库"><a href="#四、Git编辑本地仓库和上传至GitHub远程仓库" class="headerlink" title="四、Git编辑本地仓库和上传至GitHub远程仓库"></a>四、Git编辑本地仓库和上传至GitHub远程仓库</h1><ul><li>1首先进入要进行操作的项目文件夹或者新建，在当前目录下右键Gitbash，也可以用cd命令进入</li><li>2初始化仓库，这一步很重要，如果没有初始化过的仓库将无法执行任何操作，检查是否已经初始化可以在当前文件夹查看有没有.git文件夹（注意是隐藏文件，需要在文件夹选项中勾选查看隐藏项目）如果没有就输入 $ git init</li><li>3添加你的项目文件，一般GitHub默认有一个README文件，即说明文件，把他看做一个文本文件，用来说明描述项目或有关说明。我们首先创建它，输入$ echo “#测试说明” &gt;&gt; README.md </li><li>4用git add添加文件进入git版本库，在此之前先输入$ git status来查看文件变动，看见标红的README.md文件说明此文件有新改动但是没有上传保存。我们将它添加进去，输入$ git add README.md 添加文件，再提交备注信息，输入$ git commit -m “你的备注信息”</li><li>5至此我们完成了文件的改动，但它还保留在本地，我们需要把他们上传到远程仓库GitHub里面，首先在你的GitHub上新建项目库（点击右上角头像左边的＋号，选择New repository）,然后在Repository name里自己起一个你的远程仓库名，其他默认，点击创建。</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/new.png" alt="图片的alt信息，可空)"></li><li><ul><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/xmname.png" alt="图片的alt信息，可空)"></li></ul></li><li>6在创建好的项目库中提示添加你的项目文件，我们的项目文件在本地，所以选择第一种，复制它的SSH</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/copy.png" alt="图片的alt信息，可空)"></li><li>7回到你的本地项目文件夹，绑定远程仓库，只需要在gitbash中输入$ git remote add origin “粘贴第6步复制的SSH地址”(右键paste)，然后敲回车。没有报错就接着输入$ git push -u origin master ，回车之后等待一段时间，可以看到文件上传成功，回到GitHub仓库下刷新看看，添加的文件有没有导入进来。如果能显示刚刚添加README文件就证明已经上传成功啦！</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/test.png" alt="图片的alt信息，可空)"><br></font><br /> </li></ul><hr><font size="3"><h1 id="五、6个常用命令"><a href="#五、6个常用命令" class="headerlink" title="五、6个常用命令"></a>五、6个常用命令</h1><ul><li>1<br>  $ git init    –&gt;初始化本地仓库（每个项目文件夹下只需要初始化一次即可）</li><li>2<br>  $ git status –&gt;查看状态</li><li>3<br>  $ git add 文件名–&gt;跟踪修改文件（更新文件）</li><li>4<br>  $ git commit -m “你的备注信息”–&gt;提交所有更新过的文件</li><li>5<br>  $ git remote add origin github的SSH地址.git–&gt;添加远程版本库</li><li>6<br>  $ git push -u origin master–&gt;上传代码及快速合并</li><li>7常用命令表：</li><li><img src="https://raw.githubusercontent.com/lnkDrop/work/master/img/git.jpg" alt="图片的alt信息，可空)"></li></ul><p></font><br /> </p><hr><font size="3"><h1 id="六、更新本地文件到github"><a href="#六、更新本地文件到github" class="headerlink" title="六、更新本地文件到github"></a>六、更新本地文件到github</h1><ul><li>1假如你本地文件做出修改，需要同步上传到github，只要使用第五条6个常用命令的几个代码。</li><li>2假设你已对文件夹做出修改，在此文件夹下右键打开gitbash并输入<br>  $ git status<br>会看到修改过的文件已经标红，意思是文件做出修改但未提交</li><li>3接着输入<br>  $ git add “刚才做出修改的文件的文件名”<br>或者用<br>  $ git add .   —&gt;跟踪所有修改过的文件</li><li>4提交修改，输入<br>  $ git commit -m “备注信息”</li><li>5上传修改文件到github，输入<br>  $ git push -u origin master</li></ul><p></font><br /> </p><hr><h3 id="注：img文件夹中有部分git指令运行截图-报错的先看有没有初始化本地仓库，然后看顺序有没有错。"><a href="#注：img文件夹中有部分git指令运行截图-报错的先看有没有初始化本地仓库，然后看顺序有没有错。" class="headerlink" title="注：img文件夹中有部分git指令运行截图,报错的先看有没有初始化本地仓库，然后看顺序有没有错。"></a>注：img文件夹中有部分git指令运行截图,报错的先看有没有初始化本地仓库，然后看顺序有没有错。</h3><h3 id="需要反复执行的命令有第五条中的2-3-4-6点，1-5点第一次执行过就可以了，注意顺序不能颠倒。"><a href="#需要反复执行的命令有第五条中的2-3-4-6点，1-5点第一次执行过就可以了，注意顺序不能颠倒。" class="headerlink" title="需要反复执行的命令有第五条中的2,3,4,6点，1,5点第一次执行过就可以了，注意顺序不能颠倒。"></a>需要反复执行的命令有第五条中的2,3,4,6点，1,5点第一次执行过就可以了，注意顺序不能颠倒。</h3><h3 id="README说明文件需要用到md编辑器，推荐下载Markdown编辑器进行编辑"><a href="#README说明文件需要用到md编辑器，推荐下载Markdown编辑器进行编辑" class="headerlink" title="README说明文件需要用到md编辑器，推荐下载Markdown编辑器进行编辑"></a>README说明文件需要用到md编辑器，推荐下载Markdown编辑器进行编辑</h3>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>doc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于在腾讯云搭建Hexo的一些小坑</title>
    <link href="/2020/03/24/%E5%85%B3%E4%BA%8E%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BAHexo%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91/"/>
    <url>/2020/03/24/%E5%85%B3%E4%BA%8E%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BAHexo%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建Hexo时跟着<a href="https://cloud.tencent.com/developer/labs/search?keyword=hexo" target="_blank" rel="noopener">腾讯云</a>的教程一步步的搭建，过程还算顺利，不过有几个坑需要注意一下</p><a id="more"></a><h1 id="服务器IP问题"><a href="#服务器IP问题" class="headerlink" title="服务器IP问题"></a>服务器IP问题</h1><div align=center><p> <img src="http://q7pc6tyxv.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720200330144828.png?e=1585554851&token=_NGEKIBMzfD7TiykF-JrgPUsOYYnIX7MMebPf5ab:3N5LnID-VODJ59FRNLgaEGFOqLE=&attname=" alt=""></p><p>刚点进去这里会自动输入一个不起眼的IP地址，仔细一看，和我的服务器IP根本不是一个！这好像是个实验室留用地址，相当于你是在另一个服务器上做的实验，如果要留用实验成果还得花钱？？时间到了就把你项目重置了，坑；建议输入用户密码的时候看仔细了，把自己服务器的IP输进去，实验不成功大不了重装嘛（仅限第一次搭建的时候）</p><p> <img src="http://q7pc6tyxv.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720200330145610.png?e=1585554986&token=_NGEKIBMzfD7TiykF-JrgPUsOYYnIX7MMebPf5ab:uF0815LFpA49cDr8yT-o3Oqjjyc=&attname=" alt=""><br>  </div></p><h1 id="域名绑定和解绑"><a href="#域名绑定和解绑" class="headerlink" title="域名绑定和解绑"></a>域名绑定和解绑</h1><p>照着腾讯实验室的操作步骤一条条输指令实测没问题，就是下载Node.js和Hexo真心慢，要有点耐心等待一下，配置完后用的github做中转；可以绑定自己的域名，但实质上还是在github上的，访问可能会有丢丢慢，等域名备案好了，部署在自己服务器上</p><div align=center><p><img src="http://q7pc6tyxv.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720200330150210.png?e=1585555351&token=_NGEKIBMzfD7TiykF-JrgPUsOYYnIX7MMebPf5ab:NOo-HwVVUQTaOq-MdIXsf4EmR2M=&attname=" alt=""></p><p>因为域名备案中不能解析，实验里如果绑定过域名不能访问了，进CNAME把绑定的域名删了就好，用username.github.io访问</p></div><h1 id="写日记问题"><a href="#写日记问题" class="headerlink" title="写日记问题"></a>写日记问题</h1><p>由于hexo是静态博客，写博文只能在你本地写完了再推送到服务器，在服务器端写笔记着实有点难受<br>黑乎乎的，还没有预览，不能忍。得想个法子，用github clone到本地，vscode写完再push回去不就好了吗，虽然过程有点一波三折，但是vscode太香了<br><img src="http://q7pc6tyxv.bkt.clouddn.com/INE%40%5B~~%60%5B3CBN0%5B4238%60B%293.png?e=1585556043&token=_NGEKIBMzfD7TiykF-JrgPUsOYYnIX7MMebPf5ab:Dppe-Y84bcJwYlj1utQalOo_zz0=&attname=" alt=""><br><img src="http://q7pc6tyxv.bkt.clouddn.com/RIXT4EOZM879N%5BSJ%29~%401OU2.png?e=1585556043&token=_NGEKIBMzfD7TiykF-JrgPUsOYYnIX7MMebPf5ab:7MLmhBsfoJOvpLTBYuguliY3ZRc=&attname=" alt=""></p><p>其实如果只搭建在GitHub上的话，不用服务器，直接在你的Windows上操作即可(教程请百度~)</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>github上一大堆hexo主题，找到了clone下来，扔到themes目录下解压；<br>修改在根目录下的_config.yml文件的这个字段theme: 你要使用的主题名<br>关于主题的配置，各文档中应该都有说明</p>]]></content>
    
    
    <categories>
      
      <category>踩坑记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站小结</title>
    <link href="/2020/03/24/%E5%BB%BA%E7%AB%99%E5%B0%8F%E7%BB%93/"/>
    <url>/2020/03/24/%E5%BB%BA%E7%AB%99%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>3月24号正式搭建起这个博客，其实很早就搭建博客的想法，一直没有实践，终于抽出时间把它搭起来了，搭建过程其实非常简单，参考羊叔@<a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">CodeSheep</a>的保姆级教程；也感谢<code>Hexo</code>让我等憨憨不用手撸博客。从头到尾只用了半小时就搭好了，感兴趣的朋友完全可以尝试一下。</p><a id="more"></a><h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>此站为我个人搭建的博客，会记录总结一些打代码时踩的坑，侧重于后端开发；<br>也会记录一些日常；<br>无商用用途，如需转载请征得本人同意并标明出处</p><h1 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h1><p>搭建起hexo后第一件事大概就是去个性定制一番;安利fluid <a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">一款 Material Design 风格的 Hexo 主题</a>,非常简洁美观，配置里一堆小插件可以玩一天。<br>其他主题也可以到这里<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>查看；如果喜欢，请给作者点个赞</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>如果是跟着视频搭起来的小伙伴，应该都是部署在GitHub上，这里有个小坑，Github已经升级为Https协议，如果用七牛云或者一些云端图床，由于是Http协议，解析过来可能会加载不出来。两种解决方案</p><ul><li>一种是部署在自己的服务器域名上（以后会开篇专门记录操作步骤）</li><li>一种是把图片放在本地，托管到GitHub上 //这种方法一般存储重要的图片，如首页背景，头像等..因为托管到GitHub虽然免费，但是加载的慢啊，写日记用到的图片还是放图床比较好</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反正时不时会更新一些乱七八糟有用无用的博文，需要添加友链的请联系我，也欢迎各种技术讨论。<br><code>总之欢迎来玩</code></p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
